using Newtonsoft.Json.Bson;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Net.NetworkInformation;
using Unity.VisualScripting;
using UnityEngine;
using UnityEngine.iOS;
using UnityEngine.UIElements;

namespace Game
{

    public class PlayerMoveSet : MonoBehaviour, IMoveSet
    {
        /*
         정의 
        */
        #region .
        public class Components
        {
            [HideInInspector] public CapsuleCollider cap;
            [HideInInspector] public Rigidbody rb;
            [HideInInspector] public Animator anim;
        }

        [Serializable]
        public class CheckOption
        {
            [Tooltip("지면으로 체크할 레이어 설정")]
            public LayerMask groundLayerMask = -1;

            [Range(0.01f, 0.5f), Tooltip("전방 감지 거리")]
            public float forwardCheckDist = 0.1f;

            [Range(0.1f, 10f), Tooltip("지면 감지 거리")]
            public float groundCheckDist = 2f;

            [Range(0f, 0.1f), Tooltip("지면 인식 허용 거리")]
            public float groundCheckThreshold = 0.01f;
        }

        [Serializable]
        public class MoveOption
        {
            [Range(1f, 10f), Tooltip("이동속도")]
            public float speed = 5f;

            [Range(1f, 3f), Tooltip("스프린트 이속 증가 계수")]
            public float sprintCoef = 1.5f;

            [Range(0.1f, 0.5f), Tooltip("걷기 이속 감소 계수")]
            public float walkCoef = 0.5f;

            [Range(1f, 10f), Tooltip("점프 강도")]
            public float jumpForce = 4.2f;

            [Range(0f, 2f), Tooltip("점프 쿨타임")]
            public float jumpCooldown = 0.6f;

            [Range(0, 3), Tooltip("점프 허용 횟수")]
            public int maxJumpCount = 1;

            [Range(1f, 70f), Tooltip("등반 가능한 경사각")]
            public float maxSlopeAngle = 50f;

            [Range(0f, 4f), Tooltip("경사로 이동속도 변화율")]
            public float slopeAccel = 1f;

            [Range(-9.81f, 0f), Tooltip("중력")]
            public float gravity = -9.81f;

        }

        [Serializable]
        public class PlayerState
        {
            public bool isMoving; //움직이고있는가
            public bool isSprint; //달리고있는가
            public bool isWalking; //살금살금 걷고있는가
            public bool isGrounded; //땅에 붙어있는가
            public bool isPos; //Pos 상태인가
            public bool isOnSteepSlope; //등반 불가능한 경사로인가
            public bool isForwardBlocked; //전방에 장애물 존재
            public bool isOutOfControl; //제어 불가 상태
            public bool IsJumpTrg; //점프 입력상태
            public bool isJump; //점프 상태
            public bool isDrawMeele; //발도 상태인가
            public bool isAction; //액션을 취하고있는 상태인가
            public bool isAttack; //공격상태인가
            public byte parryType; //패리타입(상단/중단/하단)
            public byte attackType; //공격타입
        }

        [Serializable]
        public class CurrentValue
        {
            public Vector3 worldMoveDir;
            public Vector3 groundNormal;
            public Vector3 groundCross;
            public Vector3 hVelocity;

            [Space]
            public float jumpCooldown;
            public int jumpCount;
            public float outOfControlDuration;

            [Space]
            public float groundDist;
            public float groundSlopeAngle; //현재 바닥의 경사각
            public float groundVSlopeAngle; //수직으로 재측정한 경사각
            public float forwardSlopeAngle; //캐릭터가 바라보는 방향의 경사각
            public float slopeAccel; //경사로 가속/감속 비율

            [Space]
            public float gravity; //직접 제어하는 중력값
        }

        [Serializable]
        public class AnimatorOption
        {
            public string paramMoveX = "Move X";
            public string paramMoveZ = "Move Z";
            public string paramDistY = "Dist Y";
            public string paramisGround = "isGround";
            public string paramJump = "Jump";
            public string paramWalk = "Walk";
            public string paramSprint = "Sprint";
            public string paramPos = "Pos";
            public string paramDrawMeele = "DrawMeele";
            public string paramHParry = "HParry";
            public string paramMParry = "MParry";
            public string paramLParry = "LParry";
            public string paramAttack = "Attack";
            public string paramMeeleAtkType = "MeeleAtkType";
            public string paramParryTrg = "ParryTrigger";
        }
        #endregion

        /*
         변수,프로퍼티
        */
        #region .
        [SerializeField] private Components _components = new Components();
        [SerializeField] private CheckOption _checkOption = new CheckOption();
        [SerializeField] private MoveOption _moveOption = new MoveOption();
        [SerializeField] private PlayerState _playerState = new PlayerState();
        [SerializeField] private CurrentValue _currentValue = new CurrentValue();
        [SerializeField] private AnimatorOption _animatorOption = new AnimatorOption();

        private Components Com => _components;
        private CheckOption Check => _checkOption;
        private MoveOption Move => _moveOption;
        private PlayerState State => _playerState;
        private CurrentValue Value => _currentValue;
        private AnimatorOption Anim => _animatorOption;

        private float _capRadiusDiff;
        private float _fixedDeltaTime;
        private float _castRadius; // 원기둥, 캡슐 레이캐스트 반지름

        private float _moveX;
        private float _moveZ;


        private Vector3 CapsuleTopCenterPoint
           => new Vector3(transform.position.x, transform.position.y + Com.cap.height - Com.cap.radius, transform.position.z);
        private Vector3 CapsuleBottomCenterPoint
            => new Vector3(transform.position.x, transform.position.y + Com.cap.radius, transform.position.z);
        #endregion

        /*
         유니티 이벤트 
        */
        #region
        private void Start()
        {
            //Com.anim = GetComponentInChildren<Animator>();
            Com.anim = GetComponentInChildren<Animator>();
            InitRigidbody();
            InitCapsuleCollider();
        }

        private void FixedUpdate()
        {
            _fixedDeltaTime = Time.fixedDeltaTime;
            UpdateAnimeParams();
            AnimatorEvent();

            CheckGround();
            CheckForward();

            UpdateGravity();
            UpdateValues();

            CalculateMove();
            ApplyMovementToRigidbody();
        }
        #endregion

        /*
         초기화 
        */
        #region
        private void InitRigidbody()
        {
            TryGetComponent(out Com.rb);
            if (Com.rb == null) Com.rb = gameObject.AddComponent<Rigidbody>();

            //회전은 자식 트랜스폼을 통해 직접 제어할 것이기 때문에 리자드바디 회전은 제한
            Com.rb.constraints = RigidbodyConstraints.FreezeRotation;
            Com.rb.interpolation = RigidbodyInterpolation.Interpolate;
            Com.rb.collisionDetectionMode = CollisionDetectionMode.ContinuousDynamic;
            Com.rb.useGravity = false; //중력은 직접 제어
        }

        private void InitCapsuleCollider()
        {
            TryGetComponent(out Com.cap);
            if (Com.cap == null)
            {
                Com.cap = gameObject.AddComponent<CapsuleCollider>();

                //렌더러를 모두 탐색하여 높이 결정
                float maxHeight = -1f;

                //SkinnedMeshRenderer 확인
                var smrArr = GetComponentsInChildren<SkinnedMeshRenderer>();
                if (smrArr.Length > 0)
                {
                    foreach (var smr in smrArr)
                    {
                        foreach (var vertex in smr.sharedMesh.vertices)
                        {
                            if (maxHeight < vertex.y)
                                maxHeight = vertex.y;
                        }
                    }
                }
                else //MeshFilter 확인
                {
                    var mfArr = GetComponentsInChildren<MeshFilter>();
                    if (mfArr.Length > 0)
                    {
                        foreach (var mf in mfArr)
                        {
                            foreach (var vertex in mf.mesh.vertices)
                            {
                                if (maxHeight < vertex.y)
                                    maxHeight = vertex.y;
                            }
                        }
                    }
                }

                //캡슐 콜라이더 값 설정
                if (maxHeight <= 0) maxHeight = 1f;

                float center = maxHeight * 0.5f;

                Com.cap.height = maxHeight;
                Com.cap.center = Vector3.up * center;
                Com.cap.radius = 0.2f;
            }

            _castRadius = Com.cap.radius * 0.9f;
            _capRadiusDiff = Com.cap.radius - _castRadius + 0.05f;
        }
        #endregion

        /*
         그 외 다른 메서드 
        */
        #region 공개 메서드
        bool IMoveSet.IsMoving() => State.isMoving;

        float IMoveSet.GetDistFromGround() => Value.groundDist;

        void IMoveSet.SetMovement(in Vector3 worldMoveDir, bool isSprint, bool isWalking)
        {
            if (State.isPos || State.isAction) return; //Pos 상태거나 액션중일때 이동 불가능

            Value.worldMoveDir = worldMoveDir;
            State.isMoving = worldMoveDir.sqrMagnitude > 0.01f;
            State.isSprint = isSprint;
            State.isWalking = isWalking;
        }

        void IMoveSet.SendAnimMoveDir(in Vector3 moveDir, bool isCurrentFps)
        {
            if (State.isPos || State.isAction) return; //Pos 상태거나 액션중일때 이동 애니메이션 미작동

            float x, z;
            if (isCurrentFps)
            {
                x = moveDir.x;
                z = moveDir.z;

                if (State.isWalking)
                {
                    x *= 0.5f;
                    z *= 0.5f;
                }
                if (State.isSprint)
                {
                    x *= 2f;
                    z *= 2f;
                }
            }
            else
            {
                x = 0f;
                z = moveDir.sqrMagnitude > 0f ? 1f : 0f;

                if (State.isWalking)
                    z *= 0.5f;
                if (State.isSprint)
                    z *= 2f;
            }

            //보간
            const float LerpSpeed = 0.25f;
            _moveX = Mathf.Lerp(_moveX, x, LerpSpeed);
            _moveZ = Mathf.Lerp(_moveZ, z, LerpSpeed);
        }

        void IMoveSet.SetJump()
        {
            //첫 점프는 지면 위에서만
            if (!State.isGrounded && Value.jumpCount == 0) return;

            //점프 쿨타임/횟수 획인
            if (Value.jumpCooldown > 0f || Value.jumpCount >= Move.maxJumpCount) return;

            if (State.isOnSteepSlope) return; //접근 불가능 경사로에서 점프 불가능

            if (State.isPos) return; // Pos 상태일때 점프 불가능

            State.IsJumpTrg = true;
        }

        bool IMoveSet.SetPos(bool statePos)
        {
            //움직이지않고 떠있지도않고 점프상태가 아니고 발도상태가 아닐때만
            if (State.isJump || !State.isGrounded || State.isMoving || State.isDrawMeele) return false;
                 
            State.isPos = statePos; 

            return true;
        }

        bool IMoveSet.SetPosAtk(byte type)
        {
            switch(type)
            {
                case 0:
                    State.parryType = 1;
                    break;

                case 1:
                    State.parryType = 3;
                    break;

                case 2:
                    State.parryType = 2;
                    break;
            }
            return true;
        }

        //void IMoveSet.EndPos()
        //{
        //    State.isPos = false;
        //}

        bool IMoveSet.SetMeele(bool stateMeele)
        {
            //움직이지않고 떠있지도않고 점프상태가 아니고 Pos상태가 아닐때만
            if (State.isJump || !State.isGrounded || State.isMoving || State.isPos) return false;

            State.isDrawMeele = stateMeele;

            return true;
        }

        //void IMoveSet.ActionDelay(bool action)
        //{
        //    State.isAction = action;
        //}

        void IMoveSet.MeeleAttack(byte type)
        {
            State.attackType = type;
            State.isAttack = true;
        }

        void IMoveSet.StopMoving()
        {
            Value.worldMoveDir = Vector3.zero;
            State.isMoving = false;
            State.isSprint = false;
            State.isWalking = false;
        }

        void IMoveSet.KnockBack(in Vector3 force, float time)
        {
            SetOutOfControl(time);
            Com.rb.AddForce(force, ForceMode.Impulse);
        }

        public void SetOutOfControl(float time)
        {
            Value.outOfControlDuration = time;
            ResetJump();
        }
        #endregion

        #region 비공개 메서드
        private void UpdateAnimeParams() //에니메이션
        {
            Com.anim.SetFloat(Anim.paramMoveX, _moveX);
            Com.anim.SetFloat(Anim.paramMoveZ, _moveZ);
            Com.anim.SetFloat(Anim.paramDistY, Value.groundDist);
            Com.anim.SetBool(Anim.paramisGround, State.isGrounded);
            Com.anim.SetBool(Anim.paramPos, State.isPos);
            Com.anim.SetBool(Anim.paramDrawMeele, State.isDrawMeele);
            if (State.IsJumpTrg) Com.anim.SetTrigger(Anim.paramJump);

            Com.anim.SetBool(Anim.paramAttack,State.isAttack);
            Com.anim.SetFloat(Anim.paramMeeleAtkType, State.attackType);

            //if (State.attackType != 0 && !State.isAction)
            //{
            //    State.attackType = 0;
            //    Com.anim.SetFloat(Anim.paramMeeleAtkType, State.attackType);
            //}

            switch (State.parryType)
            {
                case 1:
                    Com.anim.SetTrigger(Anim.paramHParry);
                    Com.anim.SetBool(Anim.paramParryTrg, true);
                    State.parryType = 0;
                    break;

                case 2:
                    Com.anim.SetTrigger(Anim.paramMParry);
                    Com.anim.SetBool(Anim.paramParryTrg, true);
                    State.parryType = 0;
                    break;

                case 3:
                    Com.anim.SetTrigger(Anim.paramLParry);
                    Com.anim.SetBool(Anim.paramParryTrg, true);
                    State.parryType = 0;
                    break;

                case 0:
                    Com.anim.SetBool(Anim.paramParryTrg, false);
                    State.parryType = 0;
                    break;
            }
        }

        private void AnimatorEvent()
        {
            IControler controler = GetComponent<IControler>();

            if (Com.anim.GetAnimatorTransitionInfo(0).IsUserName("StartJump")) // 점프가 시작되었을때
                controler.ActionDelay(
                    PlayerControler.CannotAction.Pos |
                    PlayerControler.CannotAction.Parry |
                    PlayerControler.CannotAction.DrawPutMeele); // Pos, 패리, 발도/납도 행동불능

            if (Com.anim.GetAnimatorTransitionInfo(0).IsUserName("StartJumpAttack")) // 점프 공격시
            {
                controler.ActionDelay(
                    PlayerControler.CannotAction.All ^ PlayerControler.CannotAction.Move); // 이동 이외 행동 불가능
                State.isAttack = false;
            }

            if (Com.anim.GetAnimatorTransitionInfo(0).IsUserName("StartAttack")) // 공격모션이 시작되었을때
            {
                controler.ActionDelay(true); // 모든 행동 불가능
                State.isAttack = false;
            }

            if (Com.anim.GetAnimatorTransitionInfo(0).IsUserName("StartMeele") || // 발도/납도 또는
                Com.anim.GetAnimatorTransitionInfo(0).IsUserName("StartParry") /*|| // 패리모션이 시작될때
                Com.anim.GetAnimatorTransitionInfo(0).IsUserName("ReStartJump")*/)
                controler.ActionDelay(true); // 모든 행동 불가능

            if (Com.anim.GetAnimatorTransitionInfo(0).IsUserName("JumpDown")) // 점프 착륙 직전 ~ 착륙 시
                controler.ActionDelay(true); // 모든 행동 불가능

            if (Com.anim.GetCurrentAnimatorStateInfo(0).IsTag("Attack") &&
                Com.anim.GetCurrentAnimatorStateInfo(0).normalizedTime >= 0.6) // 공격모션이 약 2/3 정도 진행되었을때
                controler.ActionDelay(
                    PlayerControler.CannotAction.All ^ PlayerControler.CannotAction.Attack); // 공격 행동 가능

            if (Com.anim.GetAnimatorTransitionInfo(0).IsUserName("ComboAttack")) // 공격모션중 추가공격을 했을때
            {
                controler.ActionDelay(true); // 모든 행동 불가능
                State.isAttack = false;
            }

            if (Com.anim.GetAnimatorTransitionInfo(0).IsUserName("EndParry")) // 패리모션이 끝났을때
            //if (Com.anim.GetCurrentAnimatorStateInfo(0).IsTag("EndParry") &&
            //    Com.anim.GetCurrentAnimatorStateInfo(0).normalizedTime >= 0.9) // 패리모션이 끝났을때
            {
                controler.ActionDelay(false); // 모든 행동이 다시 가능
                controler.EndPosCam();
                State.isPos = false;
            }
            
            if (Com.anim.GetAnimatorTransitionInfo(0).IsUserName("EndMeele") || // 발도/납도 또는
                Com.anim.GetAnimatorTransitionInfo(0).IsUserName("EndJump") || // 점프가 끝났거나
                Com.anim.GetAnimatorTransitionInfo(0).IsUserName("EndAttack")) // 공격모션이 끝났을때
                controler.ActionDelay(false); // 모든 행동이 다시 가능

        }

        private void ResetJump()
        {
            Value.jumpCooldown = 0f;
            Value.jumpCount = 0;
            State.isJump = false;
            State.IsJumpTrg = false;
        }

        private void CheckGround() //지면 검사
        {
            Value.groundDist = float.MaxValue;
            Value.groundNormal = Vector3.up;
            Value.groundSlopeAngle = 0f;
            Value.forwardSlopeAngle = 0f;

            bool cast = Physics.SphereCast(CapsuleBottomCenterPoint, _castRadius, Vector3.down,
                out var hit, Check.groundCheckDist, Check.groundLayerMask, QueryTriggerInteraction.Ignore);
            Debug.DrawRay(CapsuleBottomCenterPoint, Vector3.down, Color.green);

            State.isGrounded = false;

            if (cast)
            {
                //지면 노멀벡터 초기화
                Value.groundNormal = hit.normal;

                //현재 위치한 지면의 경사각 구하기(캐릭터 이동방향 고려)
                Value.groundSlopeAngle = Vector3.Angle(Value.groundNormal, Vector3.up);
                Value.forwardSlopeAngle = Vector3.Angle(Value.groundNormal, Value.worldMoveDir) - 90f;

                State.isOnSteepSlope = Value.groundSlopeAngle >= Move.maxSlopeAngle;

                Value.groundDist = Mathf.Max(hit.distance - _capRadiusDiff - Check.groundCheckThreshold, 0f);

                State.isGrounded = (Value.groundDist <= 0.0001f) && !State.isOnSteepSlope;
            }

            //월드 이동벡터 회전축
            Value.groundCross = Vector3.Cross(Value.groundNormal, Vector3.up);
        }

        private void CheckForward() //장애물 검사
        {
            bool cast = Physics.CapsuleCast(CapsuleBottomCenterPoint, CapsuleTopCenterPoint, _castRadius, Value.worldMoveDir + Vector3.down * 0.1f,
                out var hit, Check.forwardCheckDist, -1, QueryTriggerInteraction.Ignore);
            Debug.DrawRay(CapsuleTopCenterPoint, Value.worldMoveDir+Vector3.down*0.1f,Color.blue);

            State.isForwardBlocked = false;
            if (cast)
            {
                float forwardObstacleAngle = Vector3.Angle(hit.normal, Vector3.up);
                State.isForwardBlocked = forwardObstacleAngle >= Move.maxSlopeAngle;
            }
        }

        private void UpdateGravity()
        {
            if (State.isGrounded)
            {
                Value.gravity = 0;
                Value.jumpCount = 0;
                State.isJump = false;
            }
            else
            {
                Value.gravity += _fixedDeltaTime * Move.gravity;
            }
        }

        private void UpdateValues()
        {
            //점프 쿨타임 계산
            if (Value.jumpCooldown > 0f) Value.jumpCooldown -= _fixedDeltaTime;

            //OutOfControl 갱신
            State.isOutOfControl = Value.outOfControlDuration > 0f;

            if (State.isOutOfControl)
            {
                Value.outOfControlDuration -= _fixedDeltaTime;
                Value.worldMoveDir = Vector3.zero;
            }
        }

        private void CalculateMove()
        {
            if (State.isOutOfControl)
            {
                Value.hVelocity = Vector3.zero;
                return;
            }

            //점프
            if (State.IsJumpTrg && Value.jumpCooldown <= 0f)
            {
                Value.gravity = Move.jumpForce;

                Value.jumpCooldown = Move.jumpCooldown;
                State.IsJumpTrg = false;
                State.isJump = true;

                Value.jumpCount++;
            }

            //x,z 이동속도 계산
            //공중에서 전방이 막힌 경우 제한 (지상에서는 벽에 붙어서 이동할수있도록 허용)
            if (State.isForwardBlocked && !State.isGrounded || State.isJump && State.isGrounded)
            {
                Value.hVelocity = Vector3.zero;
            }
            else // 이동가능한 경우 (지상이거나 전방이 막히지 않은경우)
            {
                float speed = !State.isMoving ? 0f :
                              State.isWalking ? Move.speed * Move.walkCoef :
                              State.isSprint ? Move.speed * Move.sprintCoef : Move.speed;

                Value.hVelocity = Value.worldMoveDir * speed;
            }

            //x,z 벡터 회전
            //지상이거나 지면에 가까운 높이
            if (State.isGrounded || Value.groundDist < Check.groundCheckDist && !State.isJump)
            {
                if (State.isMoving && !State.isForwardBlocked)
                {
                    //경사로 인한 가속또는 감속
                    if (Move.slopeAccel > 0f)
                    {
                        bool isPlus = Value.forwardSlopeAngle >= 0f;
                        float absFsAngle = isPlus ? Value.forwardSlopeAngle : -Value.forwardSlopeAngle;
                        float accel = Move.slopeAccel * absFsAngle * 0.01111f + 1f;
                        Value.slopeAccel = !isPlus ? accel : 1f / accel;

                        Value.hVelocity *= Value.slopeAccel;
                    }

                    //벡터 회전(경사로)
                    Value.hVelocity =
                        Quaternion.AngleAxis(-Value.groundSlopeAngle, Value.groundCross) * Value.hVelocity;
                }
            }
        }

        private void ApplyMovementToRigidbody() //리자드바디 최종 속도 적용
        {
            if (State.isOutOfControl)
            {
                Com.rb.velocity = new Vector3(Com.rb.velocity.x, Value.gravity, Com.rb.velocity.z);
                return;
            }

            Com.rb.velocity = Value.hVelocity + Vector3.up * Value.gravity;
        }
        #endregion
    }
}


