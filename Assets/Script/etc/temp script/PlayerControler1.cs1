using System;
using System.Collections;
using System.Collections.Generic;
using System.Globalization;
using System.Resources;
using System.Security.Cryptography.X509Certificates;
using TMPro;
//using Unity.VisualScripting;
//using UnityEditor.Rendering;
using UnityEngine;
//using UnityEngine.InputSystem;


public class PlayerControler1 : MonoBehaviour
{
    /*
     정의
    */
    #region .
    public enum CameraType { FPSCam, TPSCam };

    [Serializable]
    public class Components
    {
        public Camera tpsCam;
        public Camera fpsCam;

        [HideInInspector] public Transform tpRig;
        [HideInInspector] public Transform fpHig;
        [HideInInspector] public Transform fpVig;

        [HideInInspector] public GameObject tpsCamObj;
        [HideInInspector] public GameObject fpsCamObj;

        [HideInInspector] public CapsuleCollider cap;
        [HideInInspector] public Rigidbody rb;
        [HideInInspector] public Animator anim;
    }

    [Serializable]
    public class CheckOption
    {
        [Tooltip("지면으로 체크할 레이어 설정")]
        public LayerMask groundLayerMask = -1;

        [Range(0.01f, 0.5f), Tooltip("전방 감지 거리")]
        public float forwardCheckDist = 0.1f;

        [Range(0.1f, 10f), Tooltip("지면 감지 거리")]
        public float groundCheckDist = 2f;

        [Range(0f, 0.1f), Tooltip("지면 인식 허용 거리")]
        public float groundCheckThreshold = 0.01f;
    }

    [Serializable]
    public class KeyOption
    {
        public KeyCode moveFwd = KeyCode.W;
        public KeyCode moveBwd = KeyCode.S;
        public KeyCode moveLeft = KeyCode.A;
        public KeyCode moveRight = KeyCode.D;
        public KeyCode walk = KeyCode.LeftControl;
        public KeyCode sprint = KeyCode.LeftShift;
        public KeyCode jump = KeyCode.Space;
        public KeyCode switchCam = KeyCode.F5;
        public KeyCode showCursor = KeyCode.LeftAlt;
        public KeyCode pos = KeyCode.Tab;
    }

    [Serializable]
    public class MoveOption
    {
        [Range(1f, 10f), Tooltip("이동속도")]
        public float speed = 5f;

        [Range(1f, 3f), Tooltip("스프린트 이속 증가 계수")]
        public float sprintCoef = 1.5f;

        [Range(0.1f, 0.5f), Tooltip("걷기 이속 감소 계수")]
        public float walkCoef = 0.5f;

        [Range(1f, 10f), Tooltip("점프 강도")]
        public float jumpForce = 4.2f;

        [Range(0f, 2f), Tooltip("점프 쿨타임")]
        public float jumpCooldown = 0.06f;

        [Range(0, 3), Tooltip("점프 허용 횟수")]
        public int maxJumpCound = 1;

        [Range(1f, 70f), Tooltip("등반 가능한 경사각")]
        public float maxSlopeAngle = 50f;

        [Range(0f, 4f), Tooltip("경사로 이동속도 변화율")]
        public float slopeAccel = 1f;

        [Range(-9.81f, 0f), Tooltip("중력")]
        public float gravity = -9.81f;

    }

    [Serializable]
    public class CamOption
    {
        [Tooltip("게임시작 카메라")]
        public CameraType initCam;

        [Range(1f, 10f), Tooltip("상하/좌우 회전속도")]
        public float roteSpeed = 2f;

        [Range(-90f, 0f), Tooltip("올려다보기 제한각도")]
        public float lookUpDegree = -60f;

        [Range(0f, 75f), Tooltip("내려다보기 제한각도")]
        public float lookDownDegree = 75f;

        [Range(0f, 3.5f), Tooltip("줌 최대거리")]
        public float zoomMax = 3f;

        [Range(0f, 5f), Tooltip("줌 최소거리")]
        public float zoomMin = 3f;

        [Range(1f, 20f), Tooltip("줌 속도")]
        public float zoomSpeed = 10f;

        [Range(0.01f, 0.5f), Tooltip("줌 가속력")]
        public float zoomAccel = 0.1f;
    }

    [Serializable]
    public class AnimatorOption
    {
        public string paramMoveX = "Move X";
        public string paramMoveZ = "Move Z";
        public string paramDistY = "Dist Y";
        public string paramisGround = "isGround";
        public string paramJump = "Jump";
        public string paramWalk = "Walk";
        public string paramSprint = "Sprint";
        public string paramPos = "Pos";
    }

    [Serializable]
    public class PlayerState
    {
        public bool isCursorActive; //마우스커서 활성화 상태여부
        public bool isCurrentFps; //시점 fps 상태 여부
        public bool isMoving; //움직이고있는가
        public bool isSprint; //달리고있는가
        public bool isWalking; //살금살금 걷고있는가
        public bool isGrounded; //땅에 붙어있는가
        public bool isPos; //자세 상태인가
        public bool isOnSteepSlope; //등반 불가능한 경사로인가
        public bool isForwardBlocked; //전방에 장애물 존재
        public bool isOutOfControl; //제어 불가 상태
        public bool isJumptTrg; //점프 입력상태
        public bool isJump; //점프 상태
        //public bool isAttackDelay;
    }

    [Serializable]
    public class CurrentValue
    {
        public Vector3 worldMoveDir;
        public Vector3 groundNormal;
        public Vector3 groundCross;
        public Vector3 hVelocity;

        [Space]
        public float jumpCooldown;
        public float jumpCount;
        public float outOfControlDuration;

        [Space]
        public float groundDistance;
        public float groundSlopeAngle; //현재 바닥의 경사각
        public float groundVSlopeAngle; //수직으로 재측정한 경사각
        public float forwardSlopeAngle; //캐릭터가 바라보는 방향의 경사각
        public float slopeAccel; //경사로 가속/감속 비율

        [Space]
        public float gravity; //직접 제어하는 중력값
    }
    #endregion

    /*
      필드, 프로퍼티
    */
    #region .
    [SerializeField] private Components _components = new Components();
    [Space]
    [SerializeField] private CheckOption _checkOption = new CheckOption();
    [Space]
    [SerializeField] private KeyOption _keyOption = new KeyOption();
    [Space]
    [SerializeField] private MoveOption _moveOption = new MoveOption();
    [Space]
    [SerializeField] private CamOption _camOption = new CamOption();
    [Space]
    [SerializeField] private AnimatorOption _animatorOption = new AnimatorOption();
    [Space]
    [SerializeField] private PlayerState _state = new PlayerState();
    [Space]
    [SerializeField] private CurrentValue _value = new CurrentValue();

    public Components Com => _components;
    public CheckOption Check => _checkOption;
    public KeyOption Key => _keyOption;
    public MoveOption Move => _moveOption;
    public CamOption Cam => _camOption;
    public AnimatorOption Anim => _animatorOption;
    public PlayerState State => _state;
    public CurrentValue Value => _value;

    private Vector3 _moveDir;
    private Vector3 _worldMove;
    private Vector2 _rotation;
    private float _groundCheckRadius;
    private float _distFromGround;
    private float _tpsCamZoomInitDistance; //tps카메라, rig 사이의 초기 거리
    private float _tpsCamWheelInput = 0; //tps카메라 휠 입력값
    private float _currentWheel;
    private float _currentJumpCooldown;
    private float _deltaTime;
    private float _capsuleRadiusDiff;
    private float _fixedDeltaTime;

    private float _castRadius; // 원기둥, 캡슐 레이캐스트 반지름

    private Vector3 CapsuleTopCenterPoint
        => new Vector3(transform.position.x, transform.position.y + Com.cap.height - Com.cap.radius, transform.position.z);
    private Vector3 CapsuleBottomCenterPoint
        => new Vector3(transform.position.x, transform.position.y + Com.cap.radius, transform.position.z);

    //Lerp를 위한 변수들
    private float _moveX;
    private float _moveZ;
    //

    #endregion

    /*
     이벤트 
    */
    #region .
    private void Awake()
    {
        InitComponents();
        InitSettings();
    }
    private void Update()
    {
        SetValuesByKeyInput();
        //CheckDistanceGround();
        UpdateAnimeParams();
        CheckForward();
        CheckGround();

        ShowCursorToggle();
        CameraViewToggle();
        TPSCamZoom();

        Rotate();
        //PlayerMove();
        Jump();
        Pos();
        CalculateMove();

        UpdateCurrentValues();
        UpdateGravity();

        _deltaTime = Time.deltaTime;
    }

    private void FixedUpdate()
    {
        _fixedDeltaTime = Time.fixedDeltaTime;
    }

    private void UpdateCurrentValues()
    {
        if (_currentJumpCooldown > 0f)
            _currentJumpCooldown -= _deltaTime;
    }

    private void UpdateGravity()
    {
        if(State.isGrounded)
        {
            Value.gravity = 0f;
            State.isJump = false;
            Value.jumpCount = 0;
        }
        else
        {
            Value.gravity += _fixedDeltaTime * Move.gravity;
        }

        Value.gravity = Move.jumpForce;
    }
    #endregion

    /*
     초기화
    */
    #region .
    private void InitComponents()
    {
        LogNotInitComponentError(Com.tpsCam, "TPS Camera");
        LogNotInitComponentError(Com.fpsCam, "FPS Camera");
        TryGetComponent(out Com.rb);
        Com.anim = GetComponentInChildren<Animator>();

        Com.tpsCamObj = Com.tpsCam.gameObject;
        Com.tpRig = Com.tpsCam.transform.parent;
        Com.fpsCamObj = Com.fpsCam.gameObject;
        Com.fpVig = Com.fpsCam.transform.parent;
        Com.fpHig = Com.fpVig.parent;
    }

    private void InitSettings()
    {
        //Rigidbody
        if (Com.rb)
        {
            // 회전은 트랜스폼을 통해 직접 제어할 것이기 때문에 리지드바디 회전은 제한
            Com.rb.constraints = RigidbodyConstraints.FreezeRotation;
        }

        //Camera
        var allCams = FindObjectsOfType<Camera>();
        foreach (var cam in allCams)
        {
            cam.gameObject.SetActive(false);
        }
        //설정한 카메라 하나만 활성화
        State.isCurrentFps = Cam.initCam == CameraType.FPSCam;
        Com.fpsCamObj.SetActive(State.isCurrentFps);
        Com.tpsCamObj.SetActive(!State.isCurrentFps);

        TryGetComponent(out CapsuleCollider cCol);
        _groundCheckRadius = cCol ? cCol.radius : 0.1f;

        _tpsCamZoomInitDistance = Vector3.Distance(Com.tpRig.position, Com.tpsCam.transform.position);

    }
    #endregion

    /*
     입력, 1/3인칭 이동,회전
    */
    #region .
    //키보드 입력을 통해 필드 초기화
    private void SetValuesByKeyInput()
    {
        float h = 0f, v = 0f;

        if (Input.GetKey(Key.moveFwd)) v += 1.0f;
        if (Input.GetKey(Key.moveBwd)) v -= 1.0f;
        if (Input.GetKey(Key.moveLeft)) h -= 1.0f;
        if (Input.GetKey(Key.moveRight)) h += 1.0f;

        Vector3 moveInput = new Vector3(h, 0f, v).normalized;
        _moveDir = Vector3.Lerp(_moveDir, moveInput, 1f/*Move.acceleration*/); // 가속/감속
        _rotation = new Vector2(Input.GetAxisRaw("Mouse X"), -Input.GetAxisRaw("Mouse Y"));

        State.isMoving = _moveDir.sqrMagnitude > 0.01f;
        State.isSprint = Input.GetKey(Key.sprint);
        State.isWalking = Input.GetKey(Key.walk);
        _tpsCamWheelInput = Input.GetAxisRaw("Mouse ScrollWheel");
        _currentWheel = Mathf.Lerp(_currentWheel, _tpsCamWheelInput, Cam.zoomAccel);
    }

    private void Rotate()
    {
        if (State.isCurrentFps)
        {
            if (!State.isCursorActive)
                RotateFPS();
        }
        else
        {
            if (!State.isCursorActive)
                RotateTPS();
            RotateFPSRoot();
        }
    }

    //1인칭 회전
    private void RotateFPS()
    {
        float deltaCoef = _deltaTime * 50f;

        //상하 : FPSv 회전
        float xRotPrev = Com.fpVig.localEulerAngles.x;
        float xRotNext = xRotPrev + _rotation.y * Cam.roteSpeed * deltaCoef;

        if (xRotNext > 180f) xRotNext -= 360f;

        //좌우 : FPSh 회전
        float yRotPrev = Com.fpHig.localEulerAngles.y;
        float yRotNext = yRotPrev + _rotation.x * Cam.roteSpeed * deltaCoef;

        //상하 회전 가능여부
        bool xRotatable = Cam.lookUpDegree < xRotNext &&
                           Cam.lookDownDegree > xRotNext;

        //FPSv 상하 회전 적용
        Com.fpVig.localEulerAngles = Vector3.right * (xRotatable ? xRotNext : xRotPrev);

        //FPSh 좌우 회전 적용
        Com.fpHig.localEulerAngles = Vector3.up * yRotNext;
    }

    //3인칭 회전
    private void RotateTPS()
    {
        float deltaCoef = _deltaTime * 50f;

        //상하 : TPS 회전
        float xRotPrev = Com.tpRig.localEulerAngles.x;
        float xRotNext = xRotPrev + _rotation.y * Cam.roteSpeed * deltaCoef;

        if (xRotNext > 180f) xRotNext -= 360f;

        //좌우 : TPS 회전
        float yRotPrev = Com.tpRig.localEulerAngles.y;
        float yRotNext = yRotPrev + _rotation.x * Cam.roteSpeed * deltaCoef;

        //상하 회전 가능여부
        bool xRotatable = Cam.lookUpDegree < xRotNext &&
                           Cam.lookDownDegree > xRotNext;

        Vector3 nextRot = new Vector3
        (xRotatable ? xRotNext : xRotPrev, yRotNext, 0f);

        //TPS 회전 적용
        Com.tpRig.localEulerAngles = nextRot;
    }

    //3인칭일 경우 FPSh 회전
    private void RotateFPSRoot()
    {
        if (State.isMoving == false) return;

        Vector3 dir = Com.tpRig.TransformDirection(_moveDir);
        float currentY = Com.fpHig.localEulerAngles.y;
        float nextY = Quaternion.LookRotation(dir, Vector3.up).eulerAngles.y;

        if (nextY - currentY > 180f) nextY -= 360f;
        else if (currentY - nextY > 180f) nextY += 360;

        Com.fpHig.eulerAngles = Vector3.up * Mathf.Lerp(currentY, nextY, 0.1f);
    }

    //캐릭터 이동
    private void PlayerMove()
    {
        if (State.isPos) return; //자세 상태일때 이동 불가

        //이동안할때 미끄럼방지
        if (State.isMoving == false)
        {
            Com.rb.velocity = new Vector3(0f, Com.rb.velocity.y, 0f);
            return;
        }

        //실제 이동 벡터 계산
        //1인칭(fps)
        if (State.isCurrentFps)
            _worldMove = Com.fpHig.TransformDirection(_moveDir);
        //3인칭(tps)
        else
            _worldMove = Com.tpRig.TransformDirection(_moveDir);

        _worldMove *=
            (Move.speed) *
            (State.isSprint ? Move.sprintCoef : 1f) * (State.isWalking ? Move.walkCoef : 1f);

        //Y축 속도는 유지하면서 X/Z 평면 이동
        //Com.rb.velocity = new Vector3(_worldMove.x, Com.rb.velocity.y, _worldMove.z);
        Com.rb.velocity = Value.hVelocity + Vector3.up * Value.gravity;
    }

    //땅으로부터의 거리 체크
    private void CheckDistanceGround()
    {
        Vector3 ro = transform.position + Vector3.up;
        Vector3 rd = Vector3.down;
        Ray ray = new Ray(ro, rd);

        const float rayDist = 500f;
        const float threshold = 0.01f;

        bool cast = Physics.SphereCast(ray, _groundCheckRadius, out var hit, rayDist, Check.groundLayerMask);

        _distFromGround = cast ? (hit.distance - 1f + _groundCheckRadius) : float.MaxValue;
        State.isGrounded = _distFromGround <= _groundCheckRadius + threshold;
    }

    //캐릭터 점프
    private void Jump()
    {
        if (!State.isGrounded || State.isPos || Move.jumpCooldown > 0f) return; //땅에 붙어있으면서 자세 상태일때만 가능

        if (Input.GetKey(Key.jump))
        {
            State.isJumptTrg = true;
            //Com.rb.velocity = Vector3.zero; //하강 중 점프 시 속도합산 안되도록 속도 초기화
            //Com.rb.AddForce(Vector3.up * Move.jumpForce, ForceMode.VelocityChange);
            //Com.anim.SetTrigger(Anim.paramJump); //점프 에니메이션 트리거
            //_currentJumpCooldown = Move.jumpCooldown;
        }
    }

    //캐릭터 자세
    private void Pos()
    {
        if (!State.isGrounded || State.isMoving) return; //땅에 붙어있으면서 움직이지 않고있을때만 가능

        if (Input.GetKey(Key.pos))
        {
            State.isPos = true;
            Com.anim.SetBool(Anim.paramPos, true);
        }
        if (Input.GetKeyUp(Key.pos))
        {
            State.isPos = false;
        }

    }

    //이동계산
    private void CalculateMove()
    {
        //점프
        if (State.isJumptTrg)
        {
            Value.gravity = Move.jumpForce;

            Value.jumpCooldown = Move.jumpCooldown;
            State.isJumptTrg = false;
            State.isJump = true;

            Value.jumpCount++;
        }
        
        //x,z 이동속도 계산
        //공중에서 전방이 막힌 경우 제한 (지상에서는 벽에 붙어서 이동할수있도록 허용)
        if(State.isForwardBlocked && !State.isGrounded || State.isJump && State.isGrounded)
        {
            Value.hVelocity = Vector3.zero;
        }
        else // 이동가능한 경우 (지상이거나 전방이 막히지 않은경우)
        {
            float speed = !State.isMoving ? 0f :
                          !State.isSprint ? Move.speed :
                                            Move.speed * Move.sprintCoef;
            Value.hVelocity = Value.worldMoveDir * speed;
        }

        //x,z 벡터 회전
        //지상이거나 지면에 가까운 높이
        if(State.isGrounded || Value.groundDistance < Check.groundCheckDist && !State.isJump)
        {
            if(State.isMoving && !State.isForwardBlocked)
            {
                //경사로 인한 가속또는 감속
                if (Move.slopeAccel > 0f)
                {
                    bool isPlus = Value.forwardSlopeAngle >= 0f;
                    float absFsAngle = isPlus ? Value.forwardSlopeAngle : -Value.forwardSlopeAngle;
                    float accel = Move.slopeAccel * absFsAngle * 0.01111f + 1f;
                    Value.slopeAccel = !isPlus ? accel : 1f / accel;

                    Value.hVelocity *= Value.slopeAccel;
                }

                //벡터 회전(경사로)
                Value.hVelocity =
                    Quaternion.AngleAxis(-Value.groundSlopeAngle, Value.groundCross) * Value.hVelocity;
            }
        }
    }
    #endregion

    /*
     커서 토글 
    */
    #region .
    private void ShowCursorToggle()
    {
        if (Input.GetKeyDown(Key.showCursor))
            State.isCursorActive = !State.isCursorActive;

        ShowCursor(State.isCursorActive);
    }

    private void ShowCursor(bool value)
    {
        Cursor.visible = value;
        Cursor.lockState = value ? CursorLockMode.None : CursorLockMode.Locked;
    }
    #endregion

    /*
     카메라
    */
    #region .
    private void CameraViewToggle()
    {
        if (Input.GetKeyDown(Key.switchCam))
        {
            State.isCurrentFps = !State.isCurrentFps;
            Com.fpsCamObj.SetActive(State.isCurrentFps);
            Com.tpsCamObj.SetActive(!State.isCurrentFps);

            //TPS -> FPS
            if (State.isCurrentFps)
            {
                Vector3 tpsAngle = Com.tpRig.localEulerAngles;
                Com.fpVig.localEulerAngles = Vector3.right * tpsAngle.x;
                Com.fpHig.localEulerAngles = Vector3.up * tpsAngle.y;
            }
            //FPS -> TPS
            else
            {
                Vector3 newRot = default;
                newRot.x = Com.fpVig.localEulerAngles.x;
                newRot.y = Com.fpHig.localEulerAngles.y;
                Com.tpRig.localEulerAngles = newRot;
            }
        }
    }

    private void TPSCamZoom()
    {
        if (State.isCurrentFps) return; // fps 카메라일경우 반환 (tps 카메라에서만 가능)
        if (Mathf.Abs(_currentWheel) < 0.01f) return; //휠 입력이 있을때만 가능

        Transform tpsCamTr = Com.tpsCam.transform;
        Transform tpsCamRig = Com.tpRig;

        float zoom = _deltaTime * Cam.zoomSpeed;
        float currentCamToRigDist = Vector3.Distance(tpsCamTr.position, tpsCamRig.position);
        Vector3 move = Vector3.forward * zoom * _currentWheel * 10f;

        //줌 인
        if (_currentWheel > 0.01f)
        {
            if (_tpsCamZoomInitDistance - currentCamToRigDist < Cam.zoomMax)
                tpsCamTr.Translate(move, Space.Self);
        }
        else if (_currentWheel < -0.01f)
        {
            if (currentCamToRigDist - _tpsCamZoomInitDistance < Cam.zoomMin)
                tpsCamTr.Translate(move, Space.Self);
        }
        //줌 아웃
    }
    #endregion

    /*
     에니메이션
    */
    #region .
    private void UpdateAnimeParams()
    {
        if (!State.isPos)  //움직일 수 있을때만 이동 애니메이션 작동 (자세 동작 중에는 미작동)
        {
            float x, z;
            if (State.isCurrentFps)
            {
                x = _moveDir.x;
                z = _moveDir.z;

                if (State.isWalking)
                {
                    x *= 0.5f;
                    z *= 0.5f;
                }
                if (State.isSprint)
                {
                    x *= 2f;
                    z *= 2f;
                }
            }
            else
            {
                x = 0f;
                z = _moveDir.sqrMagnitude > 0f ? 1f : 0f;

                if (State.isWalking)
                    z *= 0.5f;
                if (State.isSprint)
                    z *= 2f;
            }

            //보간
            const float LerpSpeed = 0.5f;
            _moveX = Mathf.Lerp(_moveX, x, LerpSpeed);
            _moveZ = Mathf.Lerp(_moveZ, z, LerpSpeed);

            Com.anim.SetFloat(Anim.paramMoveX, _moveX);
            Com.anim.SetFloat(Anim.paramMoveZ, _moveZ);
        }
        Com.anim.SetFloat(Anim.paramDistY, _distFromGround);
        Com.anim.SetBool(Anim.paramisGround, State.isGrounded);
    }
    #endregion

    /*
     감지
    */
    #region .
    
    private void CheckForward()
    {
        bool cast = Physics.CapsuleCast(CapsuleBottomCenterPoint, CapsuleTopCenterPoint, _castRadius, Value.worldMoveDir + Vector3.down * 0.1f,
            out var hit, Check.forwardCheckDist, -1, QueryTriggerInteraction.Ignore);

        State.isForwardBlocked = false;
        if(cast)
        {
            float forwardObstacleAngle = Vector3.Angle(hit.normal, Vector3.up);
            State.isForwardBlocked = forwardObstacleAngle >= Move.maxSlopeAngle;
        }
    }

    private void CheckGround()
    {
        Value.groundDistance = float.MaxValue;
        Value.groundNormal = Vector3.up;
        Value.groundSlopeAngle = 0f;
        Value.forwardSlopeAngle = 0f;

        bool cast = Physics.SphereCast(CapsuleBottomCenterPoint, _castRadius, Vector3.down, 
            out var hit, Check.groundCheckDist, Check.groundLayerMask, QueryTriggerInteraction.Ignore);

        State.isGrounded = false;

        if(cast)
        {
            //지면 노멀벡터 초기화
            Value.groundNormal = hit.normal;

            //현재 위치한 지면의 경사각 구하기(캐릭터 이동방향 고려)
            Value.groundSlopeAngle = Vector3.Angle(Value.groundNormal, Vector3.up);
            Value.forwardSlopeAngle = Vector3.Angle(Value.groundNormal, Value.worldMoveDir) - 90f;

            State.isOnSteepSlope = Value.groundSlopeAngle >= Move.maxSlopeAngle;

            Value.groundDistance = Mathf.Max(hit.distance - _capsuleRadiusDiff - Check.groundCheckThreshold, -10f);

            State.isGrounded = (Value.groundDistance <= 0.0001f) && !State.isOnSteepSlope;
        }

        //월드 이동벡터 회전축
        Value.groundCross = Vector3.Cross(Value.groundNormal, Vector3.up);
    }

    private void LogNotInitComponentError<T>(T component, string componentName) where T : Component
    {
        if (component == null)
            Debug.LogError($"{componentName} 컴포넌트를 인스펙터에 넣어주세요!");
    }
    #endregion
}




/*
public class PlayerControler : MonoBehaviour
{
    private Rigidbody playerRb;
    private Animator animator;
    private string aniState = "AnimState";
    [SerializeField] private GameObject cam;
    [SerializeField] private float speed;

    enum States
    {
        backwalk = -1,
        idle = 0,
        walk = 1,
        run = 2,
        sprint = 3
    }

    // Start is called before the first frame update
    private void Awake()
    {
        playerRb = GetComponent<Rigidbody>();
        animator = GetComponentInChildren<Animator>();
    }

    // Update is called once per frame
    void FixedUpdate()
    {
        if(Input.GetKey(KeyCode.W))
            WalkRunSprint(1);
        else if (Input.GetKey(KeyCode.S))
            WalkRunSprint(-1);

    }

    void WalkRunSprint(int type)
    {
        switch(type)
        {
            case -1:
                animator.SetTrigger("back Walk");
                playerRb.AddForce(-cam.transform.forward * speed * 0.5f,ForceMode.Force);
                //playerRb.velocity = -cam.transform.forward * speed * 0.5f;
                if (Input.GetKeyUp(KeyCode.S))
                    animator.SetTrigger("idle");
                break;
            case 0:
                break;
            case 1:
                animator.SetTrigger("front Walk");
                playerRb.AddForce(cam.transform.forward * speed * 0.5f, ForceMode.Force);
                //playerRb.velocity = cam.transform.forward * speed * 0.5f;
                if (Input.GetKeyUp(KeyCode.W))
                    animator.SetTrigger("idle");
                break;
        }
    }
}

*/